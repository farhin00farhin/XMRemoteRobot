
@{
    ViewData["Title"] = "Test01";
}

<div class="container">
    <h2>Test01</h2>

    @*20170722 JPC Nested layout*@
    <div class="row">
        <div class="col-md-6" id="xform">
            <label>Human Commander:</label>
            <div class="row">
                <div class="col-md-2"><label>MessageId</label></div>
                <div class="col-md-3"><input type="text" id="MessageId" value="-1" readonly /></div>
            </div>
            <div class="row">
                <div class="col-md-2"><label>CategoryId</label></div>
                <div class="col-md-3"><input type="text" id="CategoryId" value="1" readonly/></div>
            </div>
            <!-- 20170909 JPC
                 CommanderId only is a simplification for demo purposes.
                 The full protocol provides for separate CommanderId and RobotId.
                 With use of CommanderId only: RobotId is the same as CommanderId.
            -->
            <div class="row">
                <div class="col-md-2"><label>CommanderId</label></div>
                <div class="col-md-3">
                    <input type="text" id="CommanderId" value="@ViewData["CommanderId"]" readonly/>
                    <input type="hidden" id="RobotId" value="0" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-2"><label>XData</label></div>
                <div class="col-md-3"><input type="text" id="XData" value='{"leftmotor": 80, "rightmotor": 100}' /> </div>
            </div>
            <div class="row">
                <div class="col-md-2"><label>IsLog</label></div>
                <div class="col-md-3"><input type="text" id="IsLog" value="false" /></div>
            </div>
            <div class="row">
                <div class="col-md-2"><label>AccessKey</label></div>
                <div class="col-md-3"><input type="text" id="AccessKey" value="mock-security-key-for-demo-only" /></div>
            </div>
            <div class="row">
                <div class="col-md-2">&nbsp;</div>
                <div class="col-md-3">
                    <input type="button" value="Send Command" onclick="AJAXSubmit();" />
                    <br /><br />
                    <input type="button" value="Send Yellow Command" onclick="XColor('yellow');" /><br />
                    <input type="button" value="Send Cyan Command" onclick="XColor('cyan');" />
                    <br />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-2"><label>Confirm Server Action</label></div>
                <div class="col-md-3"><input type="text" id="confirmSend" readonly /></div>
            </div>
            <div id=""></div>
        </div>
        <div id="robotMessage" class="col-md-6" style="display:none">          
        </div>
        <div id="robotContainer" class="col-md-6">
            Simulated Robot Client on this screen:<br />
            <br />
            The display below is a different webpage in an "iframe" to provide separation from the "Commander".<br />
            <br />
            Try this simulation first, then click the button to run with your own device or devices.<br />
            <input type="button" value="Change to Device" onclick="NoIframe(true);" /><br />
            <br /><br />
            <iframe id="robotIframe" name="robotIframe" src="~/emulators/Robot01.html" width="500" height="600"></iframe>
        </div>

    </div>

</div>

@*20170319 JPC get more flexible about deployment in website sub-folders defined as apps
    by "dropping" the ~ operator into HTML in a way that JavaScript can make use of it*@
<input id="rootDirectory" type="hidden" value="@Url.Content("~/")" />

<script type="text/javascript">
    window.onload = function () {
        //20170910 JPC config content in iframe from here in the parent.
        //ref: https://www.w3schools.com/jsref/prop_frame_contentdocument.asp
        //ref: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload
        document.getElementById("robotIframe").contentDocument.getElementById("CommanderId").value
            = document.getElementById("CommanderId").value;

        document.getElementById("robotMessage").innerHTML
            = "The Robot Simulator iframe is now switched off.<br />"
            + "You can test on a different device eg phone by navigating it to the root address of this same website: <br />"
            + window.location.protocol + "//" + window.location.host + "/"
            + "<br />then click on menu item 'Robot01'.<br />"
            + "You will need to type your 'CommanderId' value into the device.<br />"
            + "Your 'CommanderId' is <b>" + document.getElementById("CommanderId").value + "</b>"
            + "<br /><br />"
            + "<input type='button' value='Back to Simulation' onclick='NoIframe(false);' /><br/><br />";
    }

    //AJAX  ref  http://www.w3schools.com/ajax/ajax_xmlhttprequest_create.asp
    // Start by creating the xmlhttp object in Javascript to replace the older "form" methods
    function AJAXSubmit() {
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                document.getElementById("confirmSend").value = this.responseText;
            }
        };
        var requestString = document.getElementById("rootDirectory").value + "Home/XTest01/";
        //alert("requestString = " + requestString);
        var postString = "";
        var inputs = document.getElementsByTagName("input");
        for (i = 0; i < inputs.length; i++) {
            //.getAttribute method from http://javascript-coder.com/javascript-form/getelementbyid-form.phtml
            if (inputs[i].getAttribute('type') == "text" || inputs[i].getAttribute('type') == "hidden") {
                postString += inputs[i].id + "=" + inputs[i].value;
                //AccessKey is the last input field of interest
                if (inputs[i].id == "AccessKey") {
                    break;
                }
                postString += "&";
            }
        }
        //alert("postString = " + postString);

        xmlhttp.open("POST", requestString, true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send(postString);
    }

    function XColor(robotColor) {
        var oeData = document.getElementById("XData");
        //write the color command into the XData field
        oeData.value = '{"color": ' + '"' + robotColor + '"}';
        //send new data to the server
        AJAXSubmit();
    }

    function NoIframe(isChange) {
        //disable the test javascript robot (html page) from this user interface
        //and prompt for the use of a device
        var oeRobotIframe = document.getElementById("robotIframe");
        var oeRobotMessage = document.getElementById("robotMessage");
        var oeContainer = document.getElementById("robotContainer");
        if (isChange) {
            oeRobotIframe.src = "#";
            oeContainer.style.display = "none";
            oeRobotMessage.style.display = "block";
            oeRobotMessage.style.backgroundColor = "lightgrey";
        } else {
            window.location.replace(window.location.href);
        }
    }

</script>

